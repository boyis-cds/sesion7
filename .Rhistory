ylab = "Tiempo de ejecución", pch = 16)
attach(production)
plot(RunSize, RunTime, xlab = "Tamaño de ejecución",
ylab = "Tiempo de ejecución", pch = 16)
str(production)
View(production)
production <- read.table(file.choose(), header = T)
attach(production)
str(production)
plot(RunSize, RunTime, xlab = "Tamaño de ejecución",
ylab = "Tiempo de ejecución", pch = 16)
m1 <- lm(RunTime~RunSize)
View(production)
m1 <- lm(RunTime~RunSize)
summary(m1)
plot(RunSize, RunTime, xlab = "Tamaño de ejecución",
ylab = "Tiempo de ejecución", pch = 16)
abline(lsfit(RunSize, RunTime)) # Trazamos la recta de regresión estimada
mtext(expression(paste('Modelo de regresión lineal simple:',
' ',
y[i] == beta[0] + beta[1]*x[i] + e[i])),
side = 3, adj=1, font = 2)
mtext(expression(paste('Modelo de regresión lineal simple:',
' ',
y[i] == beta[0] + beta[1]*x[i] + e[i])),
side = 3, adj=1, font = 2)
text(x = 200, y = 240, expression(paste('Recta de regresión:',
' ',
y[i] == beta[0] + beta[1]*x[i])),
adj = 1, font = 2)
text(x = 350, y = 180, expression(paste('Recta estimada:',
' ',
hat(y)[i] == hat(beta)[0] + hat(beta)[1]*x[i])),
adj = 1, font = 2)
text(x = 350, y = 160, expression(paste('Recta estimada:',
' ',
hat(y)[i] == 149.74770 + 0.25924*x[i])),
adj = 1, font = 2)
m1$
# Graficamos nuestros datos nuevamente, pero ahora con la recta de regresión
# ajustada
plot(RunSize, RunTime, xlab = "Tamaño de ejecución",
ylab = "Tiempo de ejecución", pch = 16)
m1$coefficients
View(m1$residuals)
mtext(expression(paste('Modelo de regresión lineal simple:',
' ',
y[i] == beta[0] + beta[1]*x[i] + e[i])),
side = 3, adj=1, font = 2)
text(x = 200, y = 240, expression(paste('Recta de regresión:',
' ',
y[i] == beta[0] + beta[1]*x[i])),
adj = 1, font = 2)
text(x = 350, y = 180, expression(paste('Recta estimada:',
' ',
hat(y)[i] == hat(beta)[0] + hat(beta)[1]*x[i])),
adj = 1, font = 2)
text(x = 350, y = 160, expression(paste('Recta estimada:',
' ',
hat(y)[i] == 149.74770 + 0.25924*x[i])),
adj = 1, font = 2)
points(189, 215, pch=16, col = "red") # Punto muestral
points(189, 215, pch=16, col = "red") # Punto muestral
points(189, 215, pch=16, col = "red") # Punto muestral
lines(c(189, 189), c(198.7441, 215), col = "red")
lines(c(173, 173), c(166, 194.5962), col = "red")
tval <- qt(1-0.05/2, 18)
tval
pt(tval, df = 18)
round(confint(m1, level = 0.95), 3)
RunSize0 <- c(50,100,150,200,250,300,350) # Algunos posibles valores de RunSize
(conf <- predict(m1, newdata =
data.frame(RunSize = RunSize0),
interval = "confidence", level = 0.95))
rm(list = ls()) # Para eliminar objetos creados previamente
datos <- read.csv("datoslineal.csv")
datos <- read.csv(file.choose())
attach(datos)
View(datos)
datos <- read.csv(file.choose(), header = T)
View(datos)
attach(datos)
attach(production)
attach(datos)
plot(x, y, main = "Gráfico de dispersión") # 1
plot(x, y, main = "Relacion_Variables") # 1
modelo <- lm(y ~ x) # 2.
summary(modelo)
plot(x, y, main = "Relacion_Variables") # 1
modelo <- lm(y ~ x) # 2.
summary(modelo)
abline(lsfit(x, y))
par(mfrow = c(2, 2))
plot(modelo) # 3.
plot(x, y, main = "Relacion_Variables") # 1
plot(x, y, main = "Relacion_Variables") # 1
abline(lsfit(x,y))
summary(modelo)
CBE <- read.csv(file.choose(), header = TRUE)
CBE[1:4,]
class(CBE)
CBE
CBE
Elec.ts <- ts(CBE[, 3], start = 1958, freq = 12)
Elec.ts
CBE <- read.csv(file.choose(), header = TRUE)
Elec.ts <- ts(CBE[, 3], start = 1958, freq = 12)
plot(Elec.ts, xlab = "", ylab = "")
title(main = "Serie de Producción de Electricidad Australiana",
ylab = "Producción de electricidad (GWh)",
xlab = "Tiempo")
plot(diff(Elec.ts), xlab = "", ylab = "")
title(main = "Serie Diferenciada de Producción de Electricidad Australiana",
xlab = "Tiempo", ylab = "Dif Serie",
sub = "Gráfica de la serie diferenciada de primer órden")
plot(diff(log(Elec.ts)), xlab = "", ylab = "")
title(main = "Serie de log dif de Producción de Electricidad Australiana",
xlab = "Tiempo", ylab = "Dif log-Serie",
sub = "Gráfica de la serie log-transformada diferenciada de primer órden")
acf(diff(log(Elec.ts)))
x <- arima.sim(model = list(order = c(1, 1, 1), ar = 0.5, ma = 0.3), n = 1000)
arima(x, order = c(1, 1, 1))
Elec.AR <- arima(log(Elec.ts), order = c(1, 1, 0),
seas = list(order = c(1, 0, 0), 12))
Elec.AR <- arima(log(Elec.ts), order = c(1, 1, 0),
seas = list(order = c(1, 0, 0), 12))
Elec.MA <- arima(log(Elec.ts), order = c(0, 1, 1),
seas = list(order = c(0, 0, 1), 12))
get.best.arima <- function(x.ts, maxord = c(1, 1, 1, 1, 1, 1)){
best.aic <- 1e8
n <- length(x.ts)
for(p in 0:maxord[1])for(d in 0:maxord[2])for(q in 0:maxord[3])
for(P in 0:maxord[4])for(D in 0:maxord[5])for(Q in 0:maxord[6])
{
fit <- arima(x.ts, order = c(p, d, q),
seas = list(order = c(P, D, Q),
frequency(x.ts)), method = "CSS")
fit.aic <- -2*fit$loglik + (log(n) + 1)*length(fit$coef)
if(fit.aic < best.aic){
best.aic <- fit.aic
best.fit <- fit
best.model <- c(p, d, q, P, D, Q)
}
}
list(best.aic, best.fit, best.model)
}
best.arima.elec <- get.best.arima(log(Elec.ts),
maxord = c(2, 2, 2, 2, 2, 2))
best.fit.elec <- best.arima.elec[[2]]  # Modelo
best.fit.elec <- best.arima.elec[[2]]  # Modelo
best.arima.elec[[3]] # Tipo de modelo (órdenes)
best.fit.elec
best.arima.elec[[1]] # AIC
acf(resid(best.fit.elec), main = "")
title(main = "Correlograma de los residuales del ajuste")
pr <- predict(best.fit.elec, 12)$pred
ts.plot(cbind(window(Elec.ts, start = 1981),
exp(pr)), col = c("blue", "red"), xlab = "")
pr
exp(pr)
title(main = "Predicción para la serie de producción de electricidad",
xlab = "Mes",
ylab = "Producción de electricidad (GWh)")
pr <- predict(best.fit.elec, 12)$pred
ts.plot(cbind(window(Elec.ts, start = 1981),
exp(pr)), col = c("blue", "red"), xlab = "")
pr
Elec.AR
library(DBI)
library(RMySQL)
install.packages("RMySQL")
MyDataBase <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
dbListTables(MyDataBase)
dbListFields(MyDataBase, 'City')
DataDB <- dbGetQuery(MyDataBase, "select * from City")
class(DataDB)
class(DataDB)
head(DataDB)
pop.mean <- mean(DataDB$Population)  # Media a la variable de población
pop.mean
pop.3
library(dplyr)
pop50.mex <-  DataDB %>% filter(CountryCode == "MEX" ,  Population > 50000)   # Ciudades del país de México con más de 50,000 habitantes
pop50.mex <-  DataDB %>% filter(CountryCode == "MEX" ,  Population > 50000)   # Ciudades del país de México con más de 50,000 habitantes
pop50.mex
head(pop50.mex)
unique(DataDB$CountryCode)   # Países que contiene la BDD
paises<unique(DataDB$CountryCode)
paises<-unique(DataDB$CountryCode)
paises <- dbGetQuery(MyDataBase, "select distinct CountryCode from City")
dbDisconnect(MyDataBase)
URL <- "https://tools.learningcontainer.com/sample-json-file.json" # Asignando el link a una variable
JsonData <- fromJSON(file= URL)     # Se guarda el JSon en un objeto de R
library(rjson)            # Quitar comillas del nombre
install.packages("rjson")
library(rjson)            # Quitar comillas del nombre
install.packages("XML")
library(XML)
link <- "http://www-db.deis.unibo.it/courses/TW/DOCS/w3schools/xml/cd_catalog.xml"
# Analizando el XML desde la web
xmlfile <- xmlTreeParse(link)
summary(xmlfile)
head(xmlfile)
class(xmlfile)
library(forecast)
library(lubridate)
library(fpp2)
library(dplyr)
library(tidyr)
setwd("/Users/david/Documents/Aprendizaje/BEDU_Data_scientist/Modulo_2/Proyecto")
venta<- read.csv("ventas2.csv",
header = T, sep = ",")
attach(venta)
fecha <- venta[, 7] # La col fecha
venta['Fecha'] <- as.Date(fecha) # sobre escribir nueva
venta_mes<- aggregate(Ventas ~ Fecha, data = venta,
FUN = sum) # suma las ventas por fecha y por importe
ts<- ts(venta_mes$Ventas, start= c(2009,11), frequency = 12)
autoplot(ts) + ggtitle("Ventas Mes") + ylab("Ventas") + xlab("Fecha")
mod1<- HoltWinters(ts, seasonal = "additive")
plot(mod1)
pred<- predict(mod1,6, prediction.interval = T)
pred
View(venta_mes)
ts<- ts(venta_mes$Ventas, start= c(2009,11,1), frequency = 12)
mod1<- HoltWinters(ts, seasonal = "additive")
pred<- predict(mod1,6, prediction.interval = T)
pred
plot(mod1,pred)
data.frame(mod1,pred)
data.frame(pred)
accuracy(mod1)
accuracy(pred)
forecast<- forecast(mod1,h=6)
accuracy(forecast)
plot(mod1,forecast)
plot(forecast)
data.frame(forecast)
accuracy(forecast)
fcst1<- forecast(mod1,h=6)
accuracy(fcst1)
data.frame(fcst1)
mod1<- HoltWinters(ts, seasonal = "multiplicative")
plot(mod1)
fcst1<- forecast(mod1,h=6)
accuracy(fcst1)
ventas.AR<- auto.arima(ts, stationary = T, seasonal = F)
ventas.AR<- auto.arima(ts, stationary = T, seasonal = F)
ventas.AR<- auto.arima(ts, stationary = T, seasonal = F)
plot(forecast(ventas.AR,h=6))
ventas.AR<- auto.arima(ts, stationary = F, seasonal = T)
plot(forecast(ventas.AR,h=6))
data.frame(forecast(ventas.AR),h=6)
ts<- ts(venta_mes$Ventas, start= c(2009,11,1), end= c(2012,10,1), frequency = 12)
autoplot(ts) + ggtitle("Ventas Mes") + ylab("Ventas") + xlab("Fecha")
mod1<- HoltWinters(ts, seasonal = "additive")
plot(mod1)
fcst1<- forecast(mod1,h=6)
accuracy(fcst1)
plot(fcst1)
data.frame(fcst1)
tsoutliers(ts)
mod1<- HoltWinters(ts, seasonal = "additive")
plot(mod1)
fcst1<- forecast(mod1,h=6)
accuracy(fcst1)
plot(fcst1)
data.frame(fcst1)
tsclean(ts)
mod1<- HoltWinters(ts, seasonal = "additive")
plot(mod1)
fcst1<- forecast(mod1,h=6)
accuracy(fcst1)
plot(fcst1)
data.frame(fcst1)
autoplot(tsclean(ts), series="clean", color='red', lwd=0.9) +
autolayer(ts, series="original", color='gray', lwd=1) +
geom_point(data = tsoutliers(ts) %>% as.data.frame(),
aes(x=index, y=replacements), col='blue') +
labs(x = "Mes", y = "Venta papas")
library(dplyr) # Para usar el operador %>%
library(ggplot2)
setwd("/Users/david/Documents/Aprendizaje/BEDU_Data_scientist/Modulo_2/Proyecto")
embarques<- read.csv("Embarques.csv", header = T)
attach(embarques)
fecha_ped<- embarques[,2] # Columna de fecha de pedido
embarques["FECHA_DE_PEDIDO"]<- as.Date(fecha_ped)
fecha_fac<- embarques[,3] # Columna de fecha de factura
embarques["FECHA_DE_FACTURA"]<- as.Date(fecha_fac)
mes<- embarques[,23] # fecha del mes del embarque
embarques["MES"] <- as.Date(mes)
str(embarques)
setwd("/Users/david/Documents/Aprendizaje/BEDU_Data_scientist/Modulo_2/Proyecto/")
embarques<- read.csv("Embarques.csv", header = T)
embarques<- read.csv("Embarques.csv", header = T)
embarques<- read.csv("Embarques.csv", header = T)
setwd("/Users/david/Documents/Aprendizaje/BEDU_Data_scientist/Modulo_2/Proyecto")
embarques<- read.csv("Embarques.csv", header = T)
embarques<- read.csv("Embarques.csv")
embarques<- read.csv("Embarques.csv", header = T)
embarques<- read.csv("Embarques.csv", header = T)
attach(embarques)
fecha_ped<- embarques[,2] # Columna de fecha de pedido
embarques["FECHA_DE_PEDIDO"]<- as.Date(fecha_ped)
fecha_fac<- embarques[,3] # Columna de fecha de factura
embarques["FECHA_DE_FACTURA"]<- as.Date(fecha_fac)
attach(embarques)
fecha_ped<- embarques[,2] # Columna de fecha de pedido
embarques["FECHA_DE_PEDIDO"]<- as.Date(fecha_ped)
setwd("/Users/david/Documents/Aprendizaje/BEDU_Data_scientist/Modulo_2/Proyecto")
embarques<- read.csv("Embarques.csv", header = T) # No acepta acentos en los encabezados
attach(embarques)
fecha_ped<- embarques[,2] # Columna de fecha de pedido
embarques["FECHA_DE_PEDIDO"]<- as.Date(fecha_ped)
fecha_fac<- embarques[,3] # Columna de fecha de factura
embarques["FECHA_DE_FACTURA"]<- as.Date(fecha_fac)
mes<- embarques[,23] # fecha del mes del embarque
embarques["MES"] <- as.Date(mes)
str(embarques)
embarques%>%
ggplot() +
aes(DIAS_FACTURACION) +
geom_histogram(binwidth = 10, col="black", fill = "blue") +
ggtitle("Histograma de dias de facturacon") +
ylab("Documentos") +
xlab("Dias") +
theme_light()
embarques%>%
ggplot() +
aes(A_TIEMPO) +
geom_histogram(binwidth = 10, col="black", fill = "blue") +
ggtitle("Histograma de pedidos a tiempo") +
ylab("Documentos") +
xlab("A tiempo") +
theme_light()
a_tiempo<- embarques[,5]
embarques["A_TIEMPO"]<- as.character(a_tiempo)
str(embarques)
embarques%>%
ggplot() +
aes(A_TIEMPO) +
geom_histogram(binwidth = 10, col="black", fill = "blue") +
ggtitle("Histograma de pedidos a tiempo") +
ylab("Documentos") +
xlab("A tiempo") +
theme_light()
embarques<- read.csv("Embarques.csv", header = T)
attach(embarques)
fecha_ped<- embarques[,2] # Columna de fecha de pedido
embarques["FECHA_DE_PEDIDO"]<- as.Date(fecha_ped)
fecha_fac<- embarques[,3] # Columna de fecha de factura
embarques["FECHA_DE_FACTURA"]<- as.Date(fecha_fac)
mes<- embarques[,23] # fecha del mes del embarque
embarques["MES"] <- as.Date(mes)
str(embarques)
embarques%>%
ggplot() +
aes(DIAS_FACTURACION) +
geom_histogram(binwidth = 10, col="black", fill = "blue") +
ggtitle("Histograma de dias de facturacon") +
ylab("Documentos") +
xlab("Dias") +
theme_light()
embarques%>%
ggplot() +
aes(ESTADO) +
geom_histogram(binwidth = 10, col="black", fill = "blue") +
ggtitle("Histograma de pedidos por estado") +
ylab("Documentos") +
xlab("Estado") +
theme_light()
hist(embarques$CAJAS, breaks = (seq(0,1000, 20)),
main = "Cajas embarcadas",
xlab = "Cajas",
ylab = "Frecuencia")
hist(embarques$CAJAS, breaks = (seq(0,2000, 20)),
main = "Cajas embarcadas",
xlab = "Cajas",
ylab = "Frecuencia")
ggplot(embarques, aes(x = NEGOCIO, y = CAJAS, fill = STATUS)) + geom_boxplot() +
ggtitle("Boxplots") +
xlab("Negocio") +
ylab("Cajas por pedido")
ggplot(embarques, aes(x = NEGOCIO, y = CAJAS, fill = STATUS)) + geom_boxplot() +
ggtitle("Boxplots") +
xlab("Negocio") +
ylab("Cajas por pedido")
# No acepta acentos en los encabezados
View(embarques)
cj_cliente<- aggregate(CAJAS ~ CLIENTE, data = embarques,
FUN = sum) # suma las cajas por cliente
View(cj_cliente)
filter(embarques, NEGOCIO="HOGAR")
filter(embarques, NEGOCIO =="HOGAR")
cj_cliente<- aggregate(CAJAS ~ CLIENTE, data = embarques,
FUN = sum) # suma las cajas por cliente
View(cj_cliente)
plot(cj_cliente)
data.frame(cj_cliente)
hist(cj_cliente$CAJAS, breaks = (seq(0,32000,200)),
main = "Cajas embarcadas",
xlab = "Cajas",
ylab = "Frecuencia")
library(shiny)
runApp('~/Documents/Aprendizaje/BEDU_Data_scientist/Modulo_2/Shiny/ejemplo_01')
runApp('~/Documents/Aprendizaje/BEDU_Data_scientist/Modulo_2/Shiny/ejemplo_01')
runApp('~/Documents/Aprendizaje/BEDU_Data_scientist/Modulo_2/Shiny/ejemplo_01')
runApp('~/Documents/Aprendizaje/BEDU_Data_scientist/Modulo_2/Shiny/ejemplo_01')
runApp('~/Documents/Aprendizaje/BEDU_Data_scientist/Modulo_2/Shiny/ejemplo_01')
runApp('~/Documents/Aprendizaje/BEDU_Data_scientist/Modulo_2/Shiny/ejemplo_01')
runApp('~/Documents/Aprendizaje/BEDU_Data_scientist/Modulo_2/Shiny/ejemplo_01')
runApp('~/Documents/Aprendizaje/BEDU_Data_scientist/Modulo_2/Shiny/ejemplo_01')
runApp('~/Documents/Aprendizaje/BEDU_Data_scientist/Modulo_2/Shiny/ejemplo_01')
library(shiny)
library(shinydashboard)
#install.packages("shinythemes")
library(shinythemes)
#Esta parte es el análogo al ui.R
ui <-
fluidPage(
dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Histograma", tabName = "Dashboard", icon = icon("dashboard")),
menuItem("Dispersión", tabName = "graph", icon = icon("area-chart")),
menuItem("Data Table", tabName = "data_table", icon = icon("table")),
menuItem("Imágen", tabName = "img", icon = icon("file-picture-o"))
)
),
dashboardBody(
tabItems(
# Histograma
tabItem(tabName = "Dashboard",
fluidRow(
titlePanel("Histograma de las variables del data set mtcars"),
selectInput("x", "Seleccione el valor de X",
choices = names(mtcars)),
selectInput("zz", "Selecciona la variable del grid",
choices = c("cyl", "vs", "gear", "carb")),
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("bins", "Number of observations:", 1, 30, 15)
)
)
),
# Dispersión
tabItem(tabName = "graph",
fluidRow(
titlePanel(h3("Gráficos de dispersión")),
selectInput("a", "Selecciona el valor de x",
choices = names(mtcars)),
selectInput("y", "Seleccione el valor de y",
choices = names(mtcars)),
selectInput("z", "Selecciona la variable del grid",
choices = c("cyl", "vs", "gear", "carb")),
box(plotOutput("output_plot", height = 300, width = 460) )
)
),
tabItem(tabName = "data_table",
fluidRow(
titlePanel(h3("Data Table")),
dataTableOutput ("data_table")
)
),
tabItem(tabName = "img",
fluidRow(
titlePanel(h3("Imágen de calor para la correlación de las variables")),
img( src = "cor_mtcars.png",
height = 350, width = 350)
)
)
)
)
)
)
server <- function(input, output) {
library(ggplot2)
#Gráfico de Histograma
output$plot1 <- renderPlot({
x <- mtcars[,input$x]
bin <- seq(min(x), max(x), length.out = input$bins + 1)
ggplot(mtcars, aes(x, fill = mtcars[,input$zz])) +
geom_histogram( breaks = bin) +
labs( xlim = c(0, max(x))) +
theme_light() +
xlab(input$x) + ylab("Frecuencia") +
facet_grid(input$zz)
})
# Gráficas de dispersión
output$output_plot <- renderPlot({
ggplot(mtcars, aes(x =  mtcars[,input$a] , y = mtcars[,input$y],
colour = mtcars[,input$z] )) +
geom_point() +
ylab(input$y) +
xlab(input$a) +
theme_linedraw() +
facet_grid(input$z)  #selección del grid
})
#Data Table
output$data_table <- renderDataTable( {mtcars},
options = list(aLengthMenu = c(5,25,50),
iDisplayLength = 5)
)
}
runApp('~/Documents/Aprendizaje/BEDU_Data_scientist/Modulo_2/Programacion-R-Santander-2021-main/Sesion-08/Ejemplo-03')
